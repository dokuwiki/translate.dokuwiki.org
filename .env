# In all environments, the following files are loaded if they exist,
# the latter taking precedence over the former:
#
#  * .env                contains default values for the environment variables needed by the app
#  * .env.local          uncommitted file with local overrides
#  * .env.$APP_ENV       committed environment-specific defaults
#  * .env.$APP_ENV.local uncommitted environment-specific overrides
#
# Real environment variables win over .env files.
#
# DO NOT DEFINE PRODUCTION SECRETS IN THIS FILE NOR IN ANY OTHER COMMITTED FILES.
# https://symfony.com/doc/current/configuration/secrets.html
#
# Run "composer dump-env prod" to compile .env files for production use (requires symfony/flex >=1.2).
# https://symfony.com/doc/current/best_practices.html#use-environment-variables-for-infrastructure-configuration

###> symfony/framework-bundle ###
APP_ENV=dev
APP_SECRET=d2304577a2aa6152acfc22800a4b9a6d
###< symfony/framework-bundle ###

# get db server version with: mysql -V is used for en/disabling features of doctrine.
# If e.g MySQL: 8, or MariaDB: mariadb-10.2.12
# charset=utf8mb4
###> doctrine/doctrine-bundle ###
# Format described at https://www.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html#connecting-using-a-url
# IMPORTANT: You MUST configure your server version, either here or in config/packages/doctrine.yaml
#
# DATABASE_URL="sqlite:///%kernel.project_dir%/var/data.db"
# DATABASE_URL="mysql://app:!ChangeMe!@127.0.0.1:3306/app?serverVersion=8&charset=utf8mb4"
# DATABASE_URL="postgresql://app:!ChangeMe!@127.0.0.1:5432/app?serverVersion=15&charset=utf8"
DATABASE_URL="pdo-mysql://databaseuser:some very secret password@localhost/translate?serverVersion=mariadb-10.2.12&charset=utf8mb4"
###< doctrine/doctrine-bundle ###


###> knplabs/github-api ###
# GitHub api token, see https://github.com/settings/apps
# Personal Access Token > Tokens (classic)
# TODO consider one of the newer formats, unclear what is best fit for us.
# settings not used, see GITHUB_API_TOKEN below
# GITHUB_AUTH_METHOD=access_token_header
# GITHUB_USERNAME=yourapitoken
# GITHUB_SECRET=not used, instead set token as username
###< knplabs/github-api ###


###> symfony/mailer ###
# https://symfony.com/doc/5.4/mailer.html
MAILER_DSN=null://null
# user, pass and port are optional
# MAILER_DSN=smtp://user:pass@smtp.example.com:port
###< symfony/mailer ###


## note
# check also the config/packages/routing.yaml for default_uri setting of request context from console


### Settings for the translation tool ###

# email address used to set mail from the translation tool
MAILER_FROM=dokuwiki@example.com

# path to the git executable
GIT_BINARY=/usr/bin/git

# path to the data folder (must be writeable)
DATA_DIR=/var/dokuwikitranslate/data

# time since last update per repository (sec) 86400 -> 1day
REPOSITORY_UPDATE_AGE=86400

# max repositories to update per command run
MAX_REPOSITORIES_TO_UPDATE_PER_RUN=10

# max number of import errors before ignoring a repository
MAX_ERROR_COUNT=3

# max time a git command can run in sec
COMMAND_TIMEOUT=60

# GitHub api token, see https://github.com/settings/applications
# select 'repo'
GITHUB_API_TOKEN=null
# GitLab api token, see https://gitlab.com/-/profile/personal_access_tokens
# select scope 'api'
GITLAB_API_TOKEN=null

# GitHub/GitLab url
# you can change this on a development environment to setup a second ssh key for a second git account without
# messing up your environment - http://sampreshan.svashishtha.com/2012/05/20/quicktip-github-multiple-accounts-access-with-ssh/
# Use e.g. Host justadomain.github.com for the second git account and Host github.com for your default account
GITHUB_URL=github.com
GITLAB_URL=gitlab.com


## Feature flags

# enable import or export by user (development, not finished)
FEATURE_IMPORT_EXPORT_BY_USER=0
# let users add new translations via the interface (development, not finished)
FEATURE_ADD_TRANSLATION_BY_USER=0